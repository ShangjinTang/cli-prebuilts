#!/usr/bin/env bash

# A best practices Bash script template with many useful functions. This file
# combines the source.sh & script.sh files into a single script. If you want
# your script to be entirely self-contained then this should be what you want!

# Only enable these shell behaviours if we're not being sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    # A better class of script...
    set -o errexit  # Exit on most errors (see the manual)
    set -o nounset  # Disallow expansion of unset variables
    set -o pipefail # Use last non-zero exit code in a pipeline
fi

# Enable errtrace or the error trap handler will not work as expected
set -o errtrace # Ensure the error trap handler is inherited

# DESC: Usage help
# ARGS: None
# OUTS: None

# DESC: Handler for unexpected errors
# ARGS: $1 (optional): Exit code (defaults to 1)
# OUTS: None
function script_trap_err() {
    local exit_code=1

    # Disable the error trap handler to prevent potential recursion
    trap - ERR

    # Consider any further errors non-fatal to ensure we run to completion
    set +o errexit
    set +o pipefail

    # Validate any provided exit code
    if [[ ${1-} =~ ^[0-9]+$ ]]; then
        exit_code="$1"
    fi

    # Output debug data if in Cron mode
    if [[ -n ${cron-} ]]; then
        # Restore original file output descriptors
        if [[ -n ${script_output-} ]]; then
            exec 1>&3 2>&4
        fi

        # Print basic debugging information
        printf '%b\n' "$ta_none"
        printf '***** Abnormal termination of script *****\n'
        printf 'Script Path:            %s\n' "$script_path"
        printf 'Script Parameters:      %s\n' "$script_params"
        printf 'Script Exit Code:       %s\n' "$exit_code"

        # Print the script log if we have it. It's possible we may not if we
        # failed before we even called cron_init(). This can happen if bad
        # parameters were passed to the script so we bailed out very early.
        if [[ -n ${script_output-} ]]; then
            # shellcheck disable=SC2312
            printf 'Script Output:\n\n%s' "$(cat "$script_output")"
        else
            printf 'Script Output:          None (failed before log init)\n'
        fi
    fi

    # Exit with failure status
    exit "$exit_code"
}

# DESC: Handler for exiting the script
# ARGS: None
# OUTS: None
function script_trap_exit() {
    cd "$orig_cwd"

    # Remove Cron mode script log
    if [[ -n ${cron-} && -f ${script_output-} ]]; then
        rm "$script_output"
    fi

    # Remove script execution lock
    if [[ -d ${script_lock-} ]]; then
        rmdir "$script_lock"
    fi

    # Restore terminal colours
    printf '%b' "$ta_none"
}

# DESC: Exit script with the given message
# ARGS: $1 (required): Message to print on exit
#       $2 (optional): Exit code (defaults to 0)
# OUTS: None
# NOTE: The convention used in this script for exit codes is:
#       0: Normal exit
#       1: Abnormal exit due to external error
#       2: Abnormal exit due to script error
function script_exit() {
    if [[ $# -eq 1 ]]; then
        printf '%s\n' "$1"
        exit 0
    fi

    if [[ ${2-} =~ ^[0-9]+$ ]]; then
        printf '%b\n' "$1"
        # If we've been provided a non-zero exit code run the error trap
        if [[ $2 -ne 0 ]]; then
            script_trap_err "$2"
        else
            exit 0
        fi
    fi

    script_exit 'Missing required argument to script_exit()!' 2
}

# DESC: Generic script initialisation
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: $orig_cwd: The current working directory when the script was run
#       $script_path: The full path to the script
#       $script_dir: The directory path of the script
#       $script_name: The file name of the script
#       $script_params: The original parameters provided to the script
#       $ta_none: The ANSI control code to reset all text attributes
# NOTE: $script_path only contains the path that was used to call the script
#       and will not resolve any symlinks which may be present in the path.
#       You can use a tool like realpath to obtain the "true" path. The same
#       caveat applies to both the $script_dir and $script_name variables.
# shellcheck disable=SC2034
function script_init() {
    # Useful variables
    readonly orig_cwd="$PWD"
    readonly script_params="$*"
    readonly script_path="${BASH_SOURCE[0]}"
    script_dir="$(dirname "$script_path")"
    script_name="$(basename "$script_path")"
    readonly script_dir script_name

    # Important to always set as we use it in the exit handler
    # shellcheck disable=SC2155
    readonly ta_none="$(tput sgr0 2> /dev/null || true)"
}

# DESC: Initialise colour variables
# ARGS: None
# OUTS: Read-only variables with ANSI control codes
# NOTE: If --no-colour was set the variables will be empty. The output of the
#       $ta_none variable after each tput is redundant during normal execution,
#       but ensures the terminal output isn't mangled when running with xtrace.
# shellcheck disable=SC2034,SC2155
function colour_init() {
    if [[ -z ${no_colour-} ]]; then
        # Text attributes
        readonly ta_bold="$(tput bold 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_uscore="$(tput smul 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_blink="$(tput blink 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_reverse="$(tput rev 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_conceal="$(tput invis 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Foreground codes
        readonly fg_black="$(tput setaf 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_blue="$(tput setaf 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_cyan="$(tput setaf 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_green="$(tput setaf 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_magenta="$(tput setaf 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_red="$(tput setaf 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_white="$(tput setaf 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_yellow="$(tput setaf 3 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Background codes
        readonly bg_black="$(tput setab 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_blue="$(tput setab 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_cyan="$(tput setab 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_green="$(tput setab 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_magenta="$(tput setab 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_red="$(tput setab 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_white="$(tput setab 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_yellow="$(tput setab 3 2> /dev/null || true)"
        printf '%b' "$ta_none"
    else
        # Text attributes
        readonly ta_bold=''
        readonly ta_uscore=''
        readonly ta_blink=''
        readonly ta_reverse=''
        readonly ta_conceal=''

        # Foreground codes
        readonly fg_black=''
        readonly fg_blue=''
        readonly fg_cyan=''
        readonly fg_green=''
        readonly fg_magenta=''
        readonly fg_red=''
        readonly fg_white=''
        readonly fg_yellow=''

        # Background codes
        readonly bg_black=''
        readonly bg_blue=''
        readonly bg_cyan=''
        readonly bg_green=''
        readonly bg_magenta=''
        readonly bg_red=''
        readonly bg_white=''
        readonly bg_yellow=''
    fi
}

# DESC: Initialise Cron mode
# ARGS: None
# OUTS: $script_output: Path to the file stdout & stderr was redirected to
function cron_init() {
    if [[ -n ${cron-} ]]; then
        # Redirect all output to a temporary file
        script_output="$(mktemp --tmpdir "$script_name".XXXXX)"
        readonly script_output
        exec 3>&1 4>&2 1> "$script_output" 2>&1
    fi
}

# DESC: Acquire script lock
# ARGS: $1 (optional): Scope of script execution lock (system or user)
# OUTS: $script_lock: Path to the directory indicating we have the script lock
# NOTE: This lock implementation is extremely simple but should be reliable
#       across all platforms. It does *not* support locking a script with
#       symlinks or multiple hardlinks as there's no portable way of doing so.
#       If the lock was acquired it's automatically released on script exit.
function lock_init() {
    local lock_dir
    if [[ $1 = 'system' ]]; then
        lock_dir="/tmp/$script_name.lock"
    elif [[ $1 = 'user' ]]; then
        lock_dir="/tmp/$script_name.$UID.lock"
    else
        script_exit 'Missing or invalid argument to lock_init()!' 2
    fi

    if mkdir "$lock_dir" 2> /dev/null; then
        readonly script_lock="$lock_dir"
        verbose_print "Acquired script lock: $script_lock"
    else
        script_exit "Unable to acquire script lock: $lock_dir" 1
    fi
}

# DESC: Pretty print the provided string
# ARGS: $1 (required): Message to print (defaults to a green foreground)
#       $2 (optional): Colour to print the message with. This can be an ANSI
#                      escape code or one of the prepopulated colour variables.
#       $3 (optional): Set to any value to not append a new line to the message
# OUTS: None
function pretty_print() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to pretty_print()!' 2
    fi

    if [[ -z ${no_colour-} ]]; then
        if [[ -n ${2-} ]]; then
            printf '%b' "$2"
        else
            printf '%b' "$fg_green"
        fi
    fi

    # Print message & reset text attributes
    if [[ -n ${3-} ]]; then
        printf '%s%b' "$1" "$ta_none"
    else
        printf '%s%b\n' "$1" "$ta_none"
    fi
}

# DESC: Only pretty_print() the provided string if verbose mode is enabled
# ARGS: $@ (required): Passed through to pretty_print() function
# OUTS: None
function verbose_print() {
    if [[ -n ${verbose-} ]]; then
        pretty_print "$@"
    fi
}

# DESC: Combines two path variables and removes any duplicates
# ARGS: $1 (required): Path(s) to join with the second argument
#       $2 (optional): Path(s) to join with the first argument
# OUTS: $build_path: The constructed path
# NOTE: Heavily inspired by: https://unix.stackexchange.com/a/40973
function build_path() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to build_path()!' 2
    fi

    local new_path path_entry temp_path

    temp_path="$1:"
    if [[ -n ${2-} ]]; then
        temp_path="$temp_path$2:"
    fi

    new_path=
    while [[ -n $temp_path ]]; do
        path_entry="${temp_path%%:*}"
        case "$new_path:" in
            *:"$path_entry":*) ;;
            *)
                new_path="$new_path:$path_entry"
                ;;
        esac
        temp_path="${temp_path#*:}"
    done

    # shellcheck disable=SC2034
    build_path="${new_path#:}"
}

# DESC: Check a binary exists in the search path
# ARGS: $1 (required): Name of the binary to test for existence
#       $2 (optional): Set to any value to treat failure as a fatal error
# OUTS: None
function check_binary() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to check_binary()!' 2
    fi

    if ! command -v "$1" > /dev/null 2>&1; then
        if [[ -n ${2-} ]]; then
            script_exit "Missing dependency: Couldn't locate $1." 1
        else
            verbose_print "Missing dependency: $1" "${fg_red-}"
            return 1
        fi
    fi

    verbose_print "Found dependency: $1"
    return 0
}

# DESC: Validate we have superuser access as root (via sudo if requested)
# ARGS: $1 (optional): Set to any value to not attempt root access via sudo
# OUTS: None
function check_superuser() {
    local superuser
    if [[ $EUID -eq 0 ]]; then
        superuser=true
    elif [[ -z ${1-} ]]; then
        # shellcheck disable=SC2310
        if check_binary sudo; then
            verbose_print 'Sudo: Updating cached credentials ...'
            if ! sudo -v; then
                verbose_print "Sudo: Couldn't acquire credentials ..." \
                    "${fg_red-}"
            else
                local test_euid
                test_euid="$(sudo -H -- "$BASH" -c 'printf "%s" "$EUID"')"
                if [[ $test_euid -eq 0 ]]; then
                    superuser=true
                fi
            fi
        fi
    fi

    if [[ -z ${superuser-} ]]; then
        verbose_print 'Unable to acquire superuser credentials.' "${fg_red-}"
        return 1
    fi

    verbose_print 'Successfully acquired superuser credentials.'
    return 0
}

# DESC: Run the requested command as root (via sudo if requested)
# ARGS: $1 (optional): Set to zero to not attempt execution via sudo
#       $@ (required): Passed through for execution as root user
# OUTS: None
function run_as_root() {
    if [[ $# -eq 0 ]]; then
        script_exit 'Missing required argument to run_as_root()!' 2
    fi

    if [[ ${1-} =~ ^0$ ]]; then
        local skip_sudo=true
        shift
    fi

    if [[ $EUID -eq 0 ]]; then
        "$@"
    elif [[ -z ${skip_sudo-} ]]; then
        sudo -H -- "$@"
    else
        script_exit "Unable to run requested command as root: $*" 1
    fi
}

################################################################################
# SolAdd begin

# DESC: Run the function before execute a command; e.g. if $0 [$1]; then COMMAND; fi
# ARGS: $1 (optional): A prompt string before execute the COMMAND
# OUTS: None
# NOTE: confirm(): user must enter "n|no" or "y|yes"
#       confirm_default_yes(): default "yes", unless enter "n|no"
#       confirm_default_no(): default "no", unless enter "y|yes"
function confirm() {
    local default_prompt="Are you sure?"
    read -r -p "${1:-${default_prompt}} [y/n]: " response
    case "$response" in
        [yY][eE][sS] | [yY])
            true
            ;;
        [nN][oO] | [nN])
            false
            ;;
        *)
            confirm 'Please input' "$*"
            ;;
    esac
}
function confirm_default_yes() {
    local default_prompt="Are you sure?"
    read -r -p "${1:-${default_prompt}} [Y/n]: " response
    case "$response" in
        [nN][oO] | [nN])
            false
            ;;
        *)
            true
            ;;
    esac
}
function confirm_default_no() {
    local default_prompt="Are you sure?"
    read -r -p "${1:-${default_prompt}} [y/N]: " response
    case "$response" in
        [yY][eE][sS] | [yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# SolAdd end
################################################################################

# shellcheck disable=2046
function script_usage() {
    cat << EOF
Usage: $(basename "$0") [-a|--all] [-i|--install] [-v|--verbose]
A script to download (and install if required) binaries from github releases with intelligent caching.

- Download dir: ~/.gh_releases/download
- Install dir: ~/.gh_releases/bin (you can add it into PATH)
- Cache dir: ~/.gh_releases/cache (stores release hashes to avoid unnecessary downloads)

The script uses release hash caching to only download when releases have actually changed,
significantly reducing unnecessary downloads and improving performance.

Options:
     -a|--all                   Download all binaries (forces download regardless of cache); 
                                if not specified, only download missing binaries or when releases change
     -i|--install               Whether install after download or not

     -h|--help                  Displays this help
     -v|--verbose               Displays verbose output
    -nc|--no-colour             Disables colour output
    -cr|--cron                  Run silently unless we encounter an error

EOF
}

# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h | --help)
                script_usage
                exit 0
                ;;
            -v | --verbose)
                verbose=true
                ;;
            -nc | --no-colour)
                no_colour=true
                ;;
            -cr | --cron)
                cron=true
                ;;
            -a | --all)
                download_all=true
                ;;
            -i | --install)
                install=true
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 1
                ;;
        esac
    done
}

DOWNLOAD_DIR=~/.gh_releases/download
INSTALL_DIR=~/.gh_releases/bin
CACHE_DIR=~/.gh_releases/cache

function print_separate_line_wide_with_optional_arg() {
    pretty_print "============================================================" "$fg_yellow$ta_bold"
    if [ "$#" -ne 0 ]; then
        pretty_print "$*" "$fg_yellow$ta_bold"
    fi
}
function print_separate_line_with_optional_arg() {
    pretty_print "------------------------------------------------------------" "$fg_green$ta_bold"
    if [ "$#" -ne 0 ]; then
        pretty_print "$*" "$fg_green$ta_bold"
    fi
}

function binary_check() {
    local command_name="$1"
    if ! command -v "$command_name" &> /dev/null; then
        pretty_print "- $command_name does not exist" "$fg_yellow"
        return 1
    else
        pretty_print "  - [Available] " "" "-" &&
            pretty_print "$command_name" "$fg_magenta"
        return 0
    fi
}

function env_check() {
    # Check for required dependencies
    if ! binary_check "gh"; then
        pretty_print "ERROR: 'gh' (GitHub CLI) is not available" "$fg_red$ta_bold"
        pretty_print "Please install it from: https://github.com/cli/cli/releases/latest" "$fg_red"
        exit 1
    fi
    
    # Check architecture support
    local arch
    arch=$(uname -m)
    if [[ $arch != "x86_64" ]]; then
        pretty_print "ERROR: Unsupported architecture '${arch}'" "$fg_red$ta_bold"
        pretty_print "This script currently only supports x86_64 (64-bit) systems" "$fg_red"
        exit 1
    fi
    
    verbose_print "Environment check passed: gh CLI available, x86_64 architecture detected" "$fg_green"
}

# DESC: Get the latest release tag hash for a repository
# ARGS: $1 (required): Repository name (e.g., "owner/repo")
# OUTS: Latest release tag hash
function get_latest_release_hash() {
    local repo="$1"
    gh api repos/"$repo"/releases/latest --jq '.tag_name + "|" + .target_commitish' 2>/dev/null || echo ""
}

# DESC: Get cached release hash for a repository
# ARGS: $1 (required): Repository name (e.g., "owner/repo")
# OUTS: Cached release hash or empty string if not found
function get_cached_release_hash() {
    local repo="$1"
    local cache_file="$CACHE_DIR/${repo//\//_}.hash"
    if [[ -f "$cache_file" ]]; then
        cat "$cache_file"
    else
        echo ""
    fi
}

# DESC: Save release hash to cache for a repository
# ARGS: $1 (required): Repository name (e.g., "owner/repo")
#       $2 (required): Release hash to cache
function save_release_hash() {
    local repo="$1"
    local hash="$2"
    local cache_file="$CACHE_DIR/${repo//\//_}.hash"
    mkdir -p "$CACHE_DIR"
    echo "$hash" > "$cache_file"
}

# DESC: Check if release has changed by comparing hashes
# ARGS: $1 (required): Repository name (e.g., "owner/repo")
# OUTS: Returns 0 if release has changed, 1 if not changed
function has_release_changed() {
    local repo="$1"
    local current_hash cached_hash
    
    current_hash=$(get_latest_release_hash "$repo")
    cached_hash=$(get_cached_release_hash "$repo")
    
    if [[ -z "$current_hash" ]]; then
        verbose_print "- [Warning] Failed to get release info for $repo" "$fg_yellow"
        return 0  # Assume changed if we can't get current info
    fi
    
    if [[ "$current_hash" != "$cached_hash" ]]; then
        verbose_print "- [Cache] Release changed for $repo" "$fg_cyan"
        verbose_print "  - Cached: $cached_hash" "$fg_cyan"
        verbose_print "  - Current: $current_hash" "$fg_cyan"
        save_release_hash "$repo" "$current_hash"
        return 0  # Changed
    else
        verbose_print "- [Cache] No release change for $repo" "$fg_blue"
        return 1  # Not changed
    fi
}

function cleanup() {
    echo ""
    verbose_print "Downloading interrupted"
    if rm -f "$DOWNLOAD_DIR/$PATTERN"; then
        verbose_print "$PATTERN removed" "$fg_green"
    else
        pretty_print "$PATTERN removed error" "$fg_red"
    fi
    exit 130 # SIGINT
}

function try_download() {
    REPO="$1"
    PATTERN="$2"
    local force_download="$3"  # Optional parameter to force download
    
    # Check if file exists and if we should check for updates
    local file_exists=false
    if find $DOWNLOAD_DIR -maxdepth 1 -type f -name "$PATTERN" -print -quit | grep -q . &> /dev/null; then
        file_exists=true
    fi
    
    # Determine if we should download
    local should_download=false
    
    if [[ "$force_download" == "force" ]] || [[ -n ${download_all-} ]]; then
        should_download=true
        verbose_print "- [Cache] Forced download mode" "$fg_cyan"
    elif ! $file_exists; then
        should_download=true
        verbose_print "- [Cache] File doesn't exist, downloading" "$fg_cyan"
    elif has_release_changed "$REPO"; then
        should_download=true
        verbose_print "- [Cache] Release changed, downloading" "$fg_cyan"
    else
        verbose_print "- [Cache] Release unchanged, skipping download" "$fg_blue"
    fi
    
    if $should_download; then
        # Remove existing file if it exists to ensure clean download
        if $file_exists; then
            verbose_print "- [Cache] Removing existing file: $PATTERN" "$fg_yellow"
            rm -f "$DOWNLOAD_DIR"/$PATTERN
        fi
        pretty_print "- [Downloading] $PATTERN" "$fg_green"
        verbose_print "- [Executing] gh release download --dir $DOWNLOAD_DIR --repo $1 --pattern $2" "$fg_cyan"
        gh release download --dir "$DOWNLOAD_DIR" --repo "$REPO" --pattern "$PATTERN"
    else
        pretty_print "- [Cached] ~/.gh_releases/download/$PATTERN" "$fg_blue"
    fi
}

function cp_elf_executable_from_download() {
    local pattern="$1"
    local binary="$2"
    verbose_print "  - [FileType] ELF executable"
    
    # Find the actual file that matches the pattern
    local actual_files=("$DOWNLOAD_DIR"/$pattern)
    if [[ ${#actual_files[@]} -eq 1 && -f "${actual_files[0]}" ]]; then
        local actual_file="${actual_files[0]}"
        verbose_print "  - [Executing] cp -f \"$actual_file\" \"$INSTALL_DIR/$binary\"" "$fg_cyan"
        cp -f "$actual_file" "$INSTALL_DIR/$binary"
    else
        pretty_print "  - [Error] Could not find unique file matching pattern: $pattern" "$fg_red"
        exit 1
    fi
}

function extract_targz_tarxz_from_download() {
    local pattern="$1"
    local binary="$2"
    verbose_print "  - [FileType] Compressed archive (.tar.gz/.tar.xz)"
    
    # Find the actual file that matches the pattern
    local actual_files=("$DOWNLOAD_DIR"/$pattern)
    if [[ ${#actual_files[@]} -eq 1 && -f "${actual_files[0]}" ]]; then
        local actual_file="${actual_files[0]}"
        
        # Special handling for binaries that are in the root of the archive
        if [[ $binary == "lazygit" ]] || [[ $binary == "tokei" ]] || [[ $binary == "croc" ]]; then
            verbose_print "  - [Executing] tar -xf \"$actual_file\" --strip-components=0 --wildcards \"${binary}\" -C \"$INSTALL_DIR\"" "$fg_cyan"
            tar -xf "$actual_file" --strip-components=0 --wildcards "${binary}" -C "$INSTALL_DIR" --touch
        else
            verbose_print "  - [Executing] tar -xf \"$actual_file\" --strip-components=1 --wildcards \"*/${binary}\" -C \"$INSTALL_DIR\"" "$fg_cyan"
            tar -xf "$actual_file" --strip-components=1 --wildcards "*/${binary}" -C "$INSTALL_DIR" --touch
        fi
    else
        pretty_print "  - [Error] Could not find unique file matching pattern: $pattern" "$fg_red"
        exit 1
    fi
}

function extract_zip_from_download() {
    local pattern="$1"
    local binary="$2"
    verbose_print "  - [FileType] ZIP archive"
    
    # Find the actual file that matches the pattern
    local actual_files=("$DOWNLOAD_DIR"/$pattern)
    if [[ ${#actual_files[@]} -eq 1 && -f "${actual_files[0]}" ]]; then
        local actual_file="${actual_files[0]}"
        
        # Special handling for ast-grep which has a different binary name inside the archive
        if [[ $binary == "ast-grep" ]]; then
            verbose_print "  - [Executing] Extracting 'sg' and renaming to 'ast-grep'" "$fg_cyan"
            rm -f "$INSTALL_DIR/$binary" && \
                unzip -j "$actual_file" sg -d "$INSTALL_DIR" &> /dev/null && \
                mv "$INSTALL_DIR/sg" "$INSTALL_DIR/$binary" && \
                touch "$INSTALL_DIR/$binary"
        else
            verbose_print "  - [Executing] unzip -j \"$actual_file\" \"$binary\" \"*/$binary\" -d \"$INSTALL_DIR\"" "$fg_cyan"
            # Try to extract both root-level and subdirectory patterns, ignore pattern match failures
            (unzip -j "$actual_file" "$binary" -d "$INSTALL_DIR" 2>/dev/null || \
             unzip -j "$actual_file" "*/$binary" -d "$INSTALL_DIR" 2>/dev/null) && \
                touch "$INSTALL_DIR/$binary"
        fi
    else
        pretty_print "  - [Error] Could not find unique file matching pattern: $pattern" "$fg_red"
        exit 1
    fi
}

function remove_double_quotes {
    local str="$1"
    while [[ $str == \"*\" ]]; do
        str=${str#\"}
        str=${str%\"}
    done
    echo "$str"
}

function try_download_install_binary_with_config() {
    local binary="$1"
    local repo="$2"
    local pattern="$3"
    local install_done_flag=false
    local force_mode=""
    
    # Determine if we need to process this binary
    local should_process=false
    if [[ -n ${download_all-} ]]; then
        should_process=true
        force_mode="force"
    elif ! binary_check "$binary"; then
        should_process=true
    fi
    
    if $should_process; then
        print_separate_line_with_optional_arg "$binary"
        try_download "$repo" "$pattern" "$force_mode"
        
        if [[ -n ${install-} ]]; then
            if [[ ! -f "$INSTALL_DIR/$binary" ]] || [[ "$DOWNLOAD_DIR/$pattern" -nt "$INSTALL_DIR/$binary" ]]; then
                # Determine file type and extract accordingly
                if [[ $pattern == *.tar.gz ]] || [[ $pattern == *.tar.xz ]]; then
                    extract_targz_tarxz_from_download "$pattern" "$binary"
                    install_done_flag=true
                elif [[ $pattern == *.zip ]]; then
                    extract_zip_from_download "$pattern" "$binary"
                    install_done_flag=true
                else
                    # Try to find the actual file that matches the pattern
                    local actual_files=("$DOWNLOAD_DIR"/$pattern)
                    if [[ ${#actual_files[@]} -eq 1 && -f "${actual_files[0]}" ]]; then
                        local actual_file="${actual_files[0]##*/}"  # Get just the filename
                        if file "${actual_files[0]}" | grep "ELF" &> /dev/null; then
                            cp_elf_executable_from_download "$actual_file" "$binary"
                            install_done_flag=true
                        else
                            pretty_print "  - [FileType] UNRECOGNIZED" "$fg_red"
                            pretty_print "  - Supported types: .tar.gz, .tar.xz, .zip, ELF executable" "$fg_red"
                            exit 1
                        fi
                    else
                        pretty_print "  - [FileType] UNRECOGNIZED" "$fg_red"
                        pretty_print "  - Supported types: .tar.gz, .tar.xz, .zip, ELF executable" "$fg_red"
                        exit 1
                    fi
                fi
                
                if $install_done_flag; then
                    chmod 0755 "$INSTALL_DIR/$binary" && pretty_print "- [Install] OK" "$fg_green"
                fi
            else
                pretty_print "- [Exists] ~/.gh_releases/bin/$binary is newer" "$fg_blue"
            fi
        fi
    fi
}

function get_markdown_table_line() {
    local name="$1"
    local repo="$2"
    echo "| ${name} | [${repo}](https://github.com/${repo}/releases/latest) | ![GitHub Repo stars](https://img.shields.io/github/stars/${repo}?style=flat-square&label=) | ![GitHub last release](https://img.shields.io/github/release-date/${repo}?style=flat-square&label=) | |"
}

# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    trap script_trap_err ERR
    trap script_trap_exit EXIT
    trap cleanup SIGINT

    script_init "$@"
    parse_params "$@"
    cron_init
    colour_init
    #lock_init system

    # check environment
    print_separate_line_wide_with_optional_arg "ENV CHECK"
    env_check

    SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

    # prepare directories
    [[ ! -d $DOWNLOAD_DIR ]] && mkdir -p $DOWNLOAD_DIR
    [[ ! -d $INSTALL_DIR ]] && mkdir -p $INSTALL_DIR
    [[ ! -d $CACHE_DIR ]] && mkdir -p $CACHE_DIR

    if [[ -n ${install-} ]]; then
        print_separate_line_wide_with_optional_arg "Download & Install"
        cd "$INSTALL_DIR" || script_exit "Failed to change to install directory: $INSTALL_DIR" 1
    else
        print_separate_line_wide_with_optional_arg "Download"
    fi

    cp -f "$SCRIPT_DIR"/README.orig.md "$SCRIPT_DIR"/README.md
    # shellcheck disable=SC2129
    echo -e "" >> "$SCRIPT_DIR"/README.md
    echo -e "| Binary | GitHub HomePage | Stars | Last Release | Description |" >> "$SCRIPT_DIR"/README.md
    echo -e "| --- | --- | --- | --- | --- |" >> "$SCRIPT_DIR"/README.md
    while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ $line == *name:* ]]; then
            name=$(remove_double_quotes "${line##*name: }")
        elif [[ $line == *repo:* ]]; then
            repo=$(remove_double_quotes "${line##*repo: }")
        elif [[ $line == *pattern:* ]]; then
            pattern=$(remove_double_quotes "${line##*pattern: }")
            try_download_install_binary_with_config "$name" "$repo" "$pattern"
            # shellcheck disable=SC005
            echo -e "$(get_markdown_table_line "$name" "$repo")" >> "$SCRIPT_DIR"/README.md
        fi
    done < "$SCRIPT_DIR"/gh_release_config.yml
}

# Invoke main with args if not sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    main "$@"
fi

# vim: syntax=sh cc=120 tw=119 ts=4 sw=4 sts=4 et sr
